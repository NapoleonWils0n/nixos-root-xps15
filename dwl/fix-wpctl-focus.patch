--- a/dwl.c
+++ b/dwl.c
@@ -692,9 +692,19 @@
 void
 motionnotify(uint32_t time, struct wlr_input_device *device, double sx,
 		double sy, double sx_unaccel, double sy_unaccel) {
-	Client *c = NULL;
-	LayerSurface *l = NULL;
-	double lx, ly;
[cite_start]+	Client *c = NULL; [cite: 1]
[cite_start]+	LayerSurface *l = NULL; [cite: 1]
[cite_start]+	double lx, ly; [cite: 1]
[cite_start]+	/* This event is forwarded by the cursor when a pointer emits a motion event, [cite: 1]
[cite_start]+	 * which contains the (x, y) coordinate of the pointer relative to the [cite: 1]
+	 * compositor's output layout. [cite_start]*/ [cite: 1]
[cite_start]+	if (cursor_mode == CurMove || cursor_mode == CurResize) { [cite: 1]
[cite_start]+		if (grabc) [cite: 1]
[cite_start]+			moveresize(&((Arg) { .v = grabc })); [cite: 1]
[cite_start]+		return; [cite: 1]
[cite_start]+	} [cite: 1]
[cite_start]+	wlr_idle_notifier_v1_notify_activity(idle_notifier, seat); [cite: 1]
[cite_start]+	xytonode(sx, sy, &pointer_focus_wlr_surface, &c, &l, &lx, &ly); [cite: 1]
 
-	/* This event is forwarded by the cursor when a pointer emits a motion event,
-	 * which contains the (x, y) coordinate of the pointer relative to the
-	 * compositor's output layout. */
-	if (cursor_mode == CurMove || cursor_mode == CurResize) {
-		if (grabc)
-			moveresize(&((Arg) { .v = grabc }));
-		return;
-	}
-	wlr_idle_notifier_v1_notify_activity(idle_notifier, seat);
-	xytonode(sx, sy, &pointer_focus_wlr_surface, &c, &l, &lx, &ly);
-
 	switch (cursor_mode) {
 	case CurNormal:
 	case CurPressed:
 		if (c && (!client_is_unmanaged(c) || client_wants_focus(c))) {
+			// Check if the client is different from the currently focused one
+			// and then call focusclient for sloppy focus.
+			if (seat->keyboard_state.focused_surface != client_surface(c)) {
+				focusclient(c, 0); // Re-introduce the sloppy focus behavior
+			}
 			pointerfocus(c, surface, lx, ly, time);
 		} else if (l) {
+			// For layer surfaces, we don't necessarily want to change keyboard focus
+			// unless it's explicitly interactive.
+			// The client_notify_enter handles activating the layer.
 			pointerfocus(NULL, NULL, 0, 0, time);
 			client_notify_enter(l->layer_surface->surface, wlr_seat_get_keyboard(seat));
 		} else {
+			// Clear pointer focus if over no surface
 			pointerfocus(NULL, NULL, 0, 0, time);
 		}
 		break;